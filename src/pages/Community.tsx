
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Layout from '@/components/layout/Layout';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { 
  Heart, MessageCircle, Share, Bookmark, Plus, Users, MoreVertical, Search,
  ArrowLeft
} from 'lucide-react';
import { toast } from 'sonner';

// Mock data for community posts
const posts = [
  {
    id: 1,
    user: {
      name: '‡§Ö‡§Æ‡§ø‡§§ ‡§∂‡§∞‡•ç‡§Æ‡§æ',
      avatar: null,
      location: '‡§Æ‡•Å‡§Ç‡§¨‡§à'
    },
    content: '‡§Æ‡•à‡§Ç‡§®‡•á ‡§™‡§ø‡§õ‡§≤‡•á 6 ‡§Æ‡§π‡•Ä‡§®‡•á ‡§Æ‡•á‡§Ç ‡§π‡§∞ ‡§¶‡§ø‡§® ‚Çπ50 ‡§¨‡§ö‡§æ‡§è ‡§î‡§∞ ‡§Ö‡§¨ ‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ö‡§™‡§®‡•á ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§õ‡•ã‡§ü‡§æ ‡§∏‡§æ ‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä ‡§´‡§Ç‡§° ‡§¨‡§®‡§æ ‡§≤‡§ø‡§Ø‡§æ ‡§π‡•à‡•§ ‡§õ‡•ã‡§ü‡•Ä ‡§¨‡§ö‡§§, ‡§¨‡§°‡§º‡§æ ‡§∏‡•Å‡§ñ!',
    translation: 'I saved ‚Çπ50 every day for the past 6 months and now I have created a small emergency fund for my children. Small savings, big happiness!',
    image: '/placeholder.svg',
    likes: 45,
    comments: 12,
    timestamp: '2 ‡§ò‡§Ç‡§ü‡•á ‡§™‡§π‡§≤‡•á',
    category: 'savings'
  },
  {
    id: 2,
    user: {
      name: '‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§™‡§ü‡•á‡§≤',
      avatar: null,
      location: '‡§Ö‡§π‡§Æ‡§¶‡§æ‡§¨‡§æ‡§¶'
    },
    content: '‡§Æ‡•à‡§Ç‡§®‡•á ‡§è‡§ï ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§´‡•ç‡§∞‡•â‡§° ‡§∏‡•á ‡§¨‡§ö‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ‡§Ø‡§æ‡§¨‡•Ä ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡•Ä! ‡§ï‡§ø‡§∏‡•Ä ‡§®‡•á ‡§Æ‡•Å‡§ù‡•á WhatsApp ‡§™‡§∞ "‡§¨‡•à‡§Ç‡§ï ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•Ä" ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§î‡§∞ OTP ‡§Æ‡§æ‡§Ç‡§ó‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Æ‡•Å‡§ù‡•á ‡§ß‡•ã‡§ñ‡§æ‡§ß‡§°‡§º‡•Ä ‡§°‡§ø‡§ü‡•á‡§ï‡•ç‡§∂‡§® ‡§ó‡•á‡§Æ ‡§∏‡•á ‡§∏‡•Ä‡§ñ‡•á ‡§ó‡§è ‡§∏‡§Ç‡§ï‡•á‡§§‡•ã‡§Ç ‡§ï‡•Ä ‡§Ø‡§æ‡§¶ ‡§Ü‡§à‡•§',
    translation: 'I successfully avoided an online fraud! Someone contacted me on WhatsApp as a "bank officer" and asked for OTP, but I remembered the signs I learned from the fraud detection game.',
    likes: 78,
    comments: 23,
    timestamp: '5 ‡§ò‡§Ç‡§ü‡•á ‡§™‡§π‡§≤‡•á',
    category: 'fraud'
  },
  {
    id: 3,
    user: {
      name: '‡§∞‡§æ‡§ú‡•á‡§∂ ‡§ï‡•Å‡§Æ‡§æ‡§∞',
      avatar: null,
      location: '‡§ï‡•ã‡§≤‡§ï‡§æ‡§§‡§æ'
    },
    content: '‡§á‡§∏ ‡§ê‡§™ ‡§ï‡•á ‡§¨‡§ú‡§ü ‡§ü‡•Ç‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á, ‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ö‡§™‡§®‡•á ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§ø‡§Ø‡§æ ‡§î‡§∞ 3 ‡§Æ‡§π‡•Ä‡§®‡•á ‡§Æ‡•á‡§Ç ‚Çπ15,000 ‡§ï‡•Ä ‡§¨‡§ö‡§§ ‡§ï‡•Ä! ‡§Ö‡§¨ ‡§Æ‡•à‡§Ç ‡§Ö‡§™‡§®‡•Ä ‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§è ‡§â‡§™‡§ï‡§∞‡§£ ‡§ñ‡§∞‡•Ä‡§¶‡§®‡•á ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§',
    translation: 'By using the budget tool of this app, I started tracking my expenses and saved ‚Çπ15,000 in 3 months! Now I am planning to buy new equipment for my shop.',
    image: '/placeholder.svg',
    likes: 112,
    comments: 34,
    timestamp: '1 ‡§¶‡§ø‡§® ‡§™‡§π‡§≤‡•á',
    category: 'savings'
  }
];

// Mock data for community suggestions
const suggestions = [
  {
    id: 1,
    name: '‡§∏‡•Å‡§®‡•Ä‡§≤ ‡§µ‡§∞‡•ç‡§Æ‡§æ',
    avatar: null,
    location: '‡§ú‡§Ø‡§™‡•Å‡§∞',
    mutualFriends: 3
  },
  {
    id: 2,
    name: '‡§®‡•á‡§π‡§æ ‡§ó‡•Å‡§™‡•ç‡§§‡§æ',
    avatar: null,
    location: '‡§≤‡§ñ‡§®‡§ä',
    mutualFriends: 1
  },
  {
    id: 3,
    name: '‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§∏‡§ø‡§Ç‡§π',
    avatar: null,
    location: '‡§ö‡§Ç‡§°‡•Ä‡§ó‡§¢‡§º',
    mutualFriends: 2
  },
  {
    id: 4,
    name: '‡§Ö‡§®‡•Å‡§∑‡•ç‡§ï‡§æ ‡§™‡§æ‡§Ç‡§°‡•á',
    avatar: null,
    location: '‡§≠‡•ã‡§™‡§æ‡§≤',
    mutualFriends: 5
  }
];

const Community = () => {
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState('posts');
  const [likedPosts, setLikedPosts] = useState<number[]>([]);
  const [savedPosts, setSavedPosts] = useState<number[]>([]);
  
  const handleLike = (postId: number) => {
    if (likedPosts.includes(postId)) {
      setLikedPosts(likedPosts.filter(id => id !== postId));
      toast.info('‡§™‡•ã‡§∏‡•ç‡§ü ‡§Ö‡§®‡§≤‡§æ‡§á‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ (Post unliked)');
    } else {
      setLikedPosts([...likedPosts, postId]);
      toast.success('‡§™‡•ã‡§∏‡•ç‡§ü ‡§≤‡§æ‡§á‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ! +2 XP (Post liked! +2 XP)');
    }
  };
  
  const handleSave = (postId: number) => {
    if (savedPosts.includes(postId)) {
      setSavedPosts(savedPosts.filter(id => id !== postId));
      toast.info('‡§™‡•ã‡§∏‡•ç‡§ü ‡§Ö‡§®‡§∏‡•á‡§µ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ (Post unsaved)');
    } else {
      setSavedPosts([...savedPosts, postId]);
      toast.success('‡§™‡•ã‡§∏‡•ç‡§ü ‡§∏‡•á‡§µ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ! (Post saved!)');
    }
  };
  
  const handleComment = (postId: number) => {
    toast.info('‡§ï‡§Æ‡•á‡§Ç‡§ü ‡§´‡•Ä‡§ö‡§∞ ‡§ú‡§≤‡•ç‡§¶ ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à... (Comment feature coming soon...)');
  };
  
  const handleShare = (postId: number) => {
    toast.success('‡§∂‡•á‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•â‡§™‡•Ä ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ! (Sharing link copied!)');
  };
  
  const handleConnect = (userId: number) => {
    toast.success('‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ! (Connection request sent!)');
  };
  
  const handleCreatePost = () => {
    navigate('/community/create-post');
  };
  
  const handleConnectRequests = () => {
    navigate('/connect-requests');
  };
  
  const handleSearch = () => {
    navigate('/search');
  };

  const handleback = () => {
    navigate(-1);
  };
  
  const getCategoryEmoji = (category: string) => {
    switch(category) {
      case 'savings': return 'üí∞';
      case 'investment': return 'üìà';
      case 'fraud': return 'üõ°Ô∏è';
      case 'borrowing': return 'üí∏';
      default: return 'üí°';
    }
  };
  
  return (
    <Layout>
      <div className="container px-4 pt-4 pb-20 max-w-lg mx-auto">
        <div className="flex items-center justify-between mb-4">
        <Button variant="ghost" size="icon" onClick={handleback}>
              <ArrowLeft className="h-5 w-5" />
          </Button>
          <h1 className="text-2xl font-bold">‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø (Community)</h1>
          <div className="flex gap-2">
            <Button variant="ghost" size="icon" onClick={handleSearch}>
              <Search className="h-5 w-5" />
            </Button>
            <Button variant="ghost" size="icon" onClick={handleConnectRequests}>
              <Users className="h-5 w-5" />
            </Button>
          </div>
        </div>
        
        <Tabs defaultValue="posts" value={activeTab} onValueChange={setActiveTab} className="mb-6">
          <TabsList className="grid grid-cols-2 mb-4">
            <TabsTrigger value="posts">
              ‡§ï‡§π‡§æ‡§®‡§ø‡§Ø‡§æ‡§Ç (Stories)
            </TabsTrigger>
            <TabsTrigger value="connect">
              ‡§ú‡•Å‡§°‡§º‡•á‡§Ç (Connect)
            </TabsTrigger>
          </TabsList>
          
          {/* Posts Tab */}
          <TabsContent value="posts" className="space-y-4">
            <Button 
              onClick={handleCreatePost}
              className="w-full bg-gradient-to-r from-primary to-accent text-white"
            >
              <Plus className="h-4 w-4 mr-2" />
              ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡§∞‡•á‡§Ç
              <br />
              <span className="text-xs">(Share your success story)</span>
            </Button>
            
            {posts.map(post => (
              <Card key={post.id} className="overflow-hidden">
                <CardContent className="p-0">
                  {/* Post Header */}
                  <div className="flex justify-between items-center p-4">
                    <div className="flex items-center gap-3">
                      <Avatar>
                        <AvatarFallback className="bg-primary text-white">
                          {post.user.name.charAt(0)}
                        </AvatarFallback>
                      </Avatar>
                      <div>
                        <h3 className="font-medium">{post.user.name}</h3>
                        <p className="text-xs text-muted-foreground">{post.user.location} ‚Ä¢ {post.timestamp}</p>
                      </div>
                    </div>
                    <Badge className="bg-primary/10 text-primary">
                      {getCategoryEmoji(post.category)} {post.category}
                    </Badge>
                  </div>
                  
                  {/* Post Content */}
                  <div className="p-4 pt-0">
                    <p className="mb-4">{post.content}</p>
                    <p className="text-xs text-muted-foreground mb-4">{post.translation}</p>
                    
                    {post.image && (
                      <div className="h-48 w-full rounded-md overflow-hidden mb-4">
                        <img src={post.image} alt="Post" className="h-full w-full object-cover" />
                      </div>
                    )}
                    
                    {/* Post Actions */}
                    <div className="flex justify-between border-t pt-3">
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => handleLike(post.id)}
                        className="flex items-center gap-1"
                      >
                        <Heart 
                          className={`h-4 w-4 ${likedPosts.includes(post.id) ? 'fill-red-500 text-red-500' : ''}`} 
                        />
                        <span>{likedPosts.includes(post.id) ? post.likes + 1 : post.likes}</span>
                      </Button>
                      
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => handleComment(post.id)}
                        className="flex items-center gap-1"
                      >
                        <MessageCircle className="h-4 w-4" />
                        <span>{post.comments}</span>
                      </Button>
                      
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => handleShare(post.id)}
                      >
                        <Share className="h-4 w-4" />
                      </Button>
                      
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => handleSave(post.id)}
                      >
                        <Bookmark 
                          className={`h-4 w-4 ${savedPosts.includes(post.id) ? 'fill-yellow-500 text-yellow-500' : ''}`}
                        />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </TabsContent>
          
          {/* Connect Tab */}
          <TabsContent value="connect">
            <h2 className="text-lg font-medium mb-4">‡§∏‡•Å‡§ù‡§æ‡§è ‡§ó‡§è ‡§≤‡•ã‡§ó (Suggested People)</h2>
            
            <div className="space-y-4">
              {suggestions.map(person => (
                <Card key={person.id}>
                  <CardContent className="p-4">
                    <div className="flex justify-between items-center">
                      <div className="flex items-center gap-3">
                        <Avatar>
                          <AvatarFallback className="bg-primary/80 text-white">
                            {person.name.charAt(0)}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <h3 className="font-medium">{person.name}</h3>
                          <p className="text-xs text-muted-foreground">
                            {person.location} ‚Ä¢ {person.mutualFriends} ‡§Ü‡§™‡§∏ ‡§ï‡•á ‡§¶‡•ã‡§∏‡•ç‡§§
                          </p>
                        </div>
                      </div>
                      <Button 
                        size="sm" 
                        onClick={() => handleConnect(person.id)}
                        className="bg-primary hover:bg-primary/90"
                      >
                        ‡§ú‡•Å‡§°‡§º‡•á‡§Ç
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
            
            <Button
              variant="outline"
              className="w-full mt-6"
              onClick={handleSearch}
            >
              <Search className="h-4 w-4 mr-2" />
              ‡§î‡§∞ ‡§≤‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•ã ‡§ñ‡•ã‡§ú‡•á‡§Ç (Find More People)
            </Button>
          </TabsContent>
        </Tabs>
      </div>
    </Layout>
  );
};

export default Community;
